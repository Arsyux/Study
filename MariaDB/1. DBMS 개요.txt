1. 데이터 베이스의 정의
 - 데이터 베이스를 '데이터의 집합'이라고 하면, DBMS는 이 데이터 베이스를 관리/운영하는 역할을 함. 데이터베이스는 여러 명의 사용자나 응용프로그램이 공유하고 동시에 접근이 가능해야함.
 - 데이터베이스는 '데이터의 저장공간'자체를 의미하기도 함. MariaDB에서는 '데이터 베이스'를 자료가 저장되는 디스크 공간으로 취급함.


2. 데이터 베이스의 특징
2-1. 데이터의 무결성
 - 데이터베이스 안의 데이터는 어떤 경로를 통해 들어왔든 데이터에 오류가 있어서는 안 된다. 이 무결성(Integrity)을 위해서 데이터베이스는 제약조건(Constraint)이라는 특성을 가진다.
2-2. 데이터의 독립성
 - 데이터베이스의 크기를 변경하거나 데이터 파일의 저장소를 변경하더라도, 기존에 작성된 응용 프로그램은 전혀 영향을 받지 않아야한다. 즉, 서로 의존적 관계가 아닌 독립적인 관계여야 한다.
2-3. 보안
 - 데이터베이스 안의 데이터는 아무나 접근할 수 있는 것이 아니라, 데이터를 소유한 사람이나 데이터의 접근이 허가된 사람만이 데이터에 접근할 수 있어야 한다. 또, 접근할 때도 사용자의 계정에 따라서 다른 권한을 가져야 한다.
2-4. 데이터 중복의 최소화
 - 동일한 데이터가 여러개 중복되어 저장되는 것을 방지함.
2-5. 응용 프로그램 제작 및 수정이 쉬워짐
 - 기존 파일시스템을 사용할 때는 각각 파일의 포맷에 맞춰 개발해야 하는 응용 프로그램을 데이터베이스를 이용함으로써 통일된 방식으로 응용 프로그램 작성이 가능해지고, 유지보수 또한 쉬워진다.
2-6. 데이터의 안전성 향상
 - 대부분의 DBMS가 제공하는 백업/복원 기능을 이용함으로써 데이터가 깨지는 문제가 발생할 경우에 원상으로 복원 또는 복구하는 방법이 명확해진다.


3. DBMS의 분류
3-1. 관계형 데이터 베이스 (RDBMS)
 - 관계형 DBMS의 시초는 1969년 E.F.Codd라는 학자가 수학 모델에 근거하여 고안하면서 시작되었음.
* 테이블을 릴레이션(Relation) 또는 엔티티(Entity)라고도 함.
 - RDBMS에서는 모든 데이터는 테이블에 저장되므로, 테이블이라는 구조가 RDBMS의 가장 기본적이고 중요한 구성이 됨.
 - 테이블은 데이터를 효율적으로 저장하기 윟한 구조임. 정보를 저장하기 위해서 하나의 테이블이 아닌 여러 개의 테이블로 나누어서 저장함으로써, 불필요한 공간의 낭비를 줄이고 데이터의 저장 효율성을 보장해 줄 수 있다. 또, 이렇게 나뉜 테이블의 관계를 기본 키(Primary Key)와 외래 키(Foreign Key)를 사용해서 맺어줌으로써, 두 테이블을 부모와 자식 관계로 묶어 줄 수 있다. 
 - RDBMS는 다른 DBMS에 비해서 업무가 변화될 경우에 쉽게 변화에 순응할 수 있는 구조이며, 유지보수 측면에서도 편리한 특징을 가지고 있다. 또한, 대용량 데이터의 관리와 데이터 무결성의 보장을 잘 해주기 때문에 동시에 데이터에 접근하는 응용 프로그램을 사용할 경우에 RDBMS는 적절한 선택이 될 수 있다.
 - RDBMS의 단점은 시스템 자원을 많이 차지하여 시스템이 전반적으로 느려지는 점이 있음.
3-2. 계층형 DBMS
 - 처음으로 나온 DBMS 개념으로 1960년대 시작되었는데, 그림과 같이 각 계층은 트리(Tree) 형태를 가지며, 1:N 관계를 갖는다.
 - 계층형 DBMS는 주어진 상태에서의 검색이 상당히 빠르다.
 - 계층형 DBMS의 단점은 처음 구축한 이후에는 그 구조를 변경하기가 상당히 까다로우며, 접근의 유연성이 부족해서 임의의 검색에는 어려움이 따름.
3-3. 망형 DBMS
 - 망형 DBMS는 계층형 DBMS의 문제점을 개선하기 위해 1970년대 시작되었으며, 1:1, 1:N, N:M 관계가 지원되어, 효과적이고 빠른 데이터 추출이 가능함.
 - 망형 DBMS의 단점은 계층형과 마찬가지로 매우 복잡한 내부 포인터를 사용하고, 프로그래머가 이 모든 구조를 이해해야만 프로그램의 작성이 가능하다는 단점이 여전히 존재함.


4. SQL의 특징
 - SQL은 데이터베이스에서 사용되는 언어임.
4-1. DBMS 제작 회사와 독립적임.
 - SQL은 모든 DBMS 제작 회사에 공통적으로 공개되고, 각 제작 회사는 이 표준 SQL에 맞춰서 DBMS를 개발하게 됨. 따라서 표준 SQL은 대부분의 DBMS 제품에서 공통적으로 호환됨.
4-2. 다른 시스템으로 이식성이 좋다.
 - SQL 표준은 서버용, 개인용, 휴대용 장비에서 운영되는 DBMS마다 상호 호환성이 뛰어남. 그러므로, 어느 곳에서 사용된 SQL이 다른 시스템으로 이식하는 데 별 문제가 없음.
4-3. 표준이 계속 발전함
 - SQL 표준은 SQL-86, SQL-89, SQL-92, SQL:1999, SQL:2003, SQL:2008, SQL:2011등 계속 개선된 표준안이 발표되어 왔으며, 지금도 개선된 안이 연구되고 보완되고 있음.
4-4. 대화식 언어
 - 기존 프로그래밍 언어는 프로그램 작성, 컴파일 및 디버깅, 실행이라는 과정을 거쳐야만 그 결과를 알 수 있으나, SQL은 이와 달리 바로 질의하고 결과를 얻는 대화식 언어로 구성되어 있음.
4-5. 분산형 클라이언트/서버 구조
 - SQL은 분산형 구조인 클라이언트/서버 구조를 지원함. 즉, 클라이언트에서 질의를 하면 서버에서 그 질의를 받아서 처리한 후, 다시 클라이언트에게 전달하는 구조를 가진다.
4-6. DBMS마다 SQL문이 완벽하게 동일하지 않음.
 - 각 회사는 표준 SQL을 지키면서도 자신의 제품에 특화시킨 SQL을 사용함.
 - Oracle에서는 PL/SQL이라고 부르고, SQL Server에서는 T-SQL, MariaDB에서는 SQL로 부른다.