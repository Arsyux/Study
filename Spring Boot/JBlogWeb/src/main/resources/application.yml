# 서버 설정
server:
  port: 8080
  servlet:
    context-path: /
    encoding:
      charset: UTF-8

# 뷰리졸버 설정
spring:
  mvc:
    view:
      prefix: /WEB-INF/jblog/
      suffix: .jsp
  # 애플리케이션을 특정 데이터베이스와 연결하려면 데이터소스가 필요함
  # 이를 위해 application.yml파일에 데이터소스 설정을 추가함
  # 데이터소스 설정
  datasource:
    driver-class-name: org.h2.Driver
    url: jdbc:h2:tcp://localhost/~/test
    username: sa
    password:
    
  # JPA 설정
  # JPA는 JDBC같은 API임.
  # 데이터베이스 연동을 처리할 때 JPA를 사용하면 운영 과정에서 구현체를 쉽게 교체할 수 있음.
  # JPA에서는 하나의 엔티티를 검색할 때 연관관계에 있는 엔티티까지 조회할 수 있으며, 이를 패치라고 함.
  # JPA에서는 패치 전략으로 EAGER와 LAZY를 지원함.
  # EAGER는 처음부터 JOIN 쿼리를 통해 연관객체를 검색하며, LAZY는 연관관계에 있는 엔티티가 실제로 사용되는 순간 별도의 SELECT를 수행함
  jpa:
    # YAML 파일에서 open-in-view를 false로 설정하면, 데이터베이스 연결은 @Service 객체에서 트랜잭션과 같이 관리되기 때문에
    # 웹 애플리케이션에서 LAZY 패치 전략을 사용할 수 없다.
    # open-in-view 설정은 기본이 true인데, 이를 통해 데이터베이스 연결을 @Controller 객체까지 유지시킬 수 있다.
    open-in-view: true
    # database-platform 설정은 JPA가 생성할 SQL을 어떤 DBMS에 최적화할 것인지 결정한다.
    # H2Dialect 클래스를 등록했으므로 H2데이터베이스에 최적화된 SQL이 만들어질 것임.
    database-platform: org.hibernate.dialect.H2Dialect
    show-sql: true
    hibernate:
      naming:
        # physical-strategy 설정은 엔티티의 변수 이름과 테이블의 컬럼 이름을 동일하게 유지시킨다.
        # 예를 들어, createDate 변수와 매핑되는 컬럼 이름을 CREATE_DATE로 처리하려면 SpringPhysicalNamingStrategy 클래스로 설정해야함.
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
      # ddl-auto는 테이블에 대한 설정임.
      # JPA에서 엔티티클래스는 테이블과 매핑됨. 따라서 엔티티 클래스와 매핑될 테이블이 존재하지 않으면 엔티티 클래스를 참조하여 테이블을 자동으로 생성함.
      # ddl-auto설정을 create로 하면 애플리케이션이 실행될 때마다 테이블을 삭제(DROP)하고 다시 생성(CREATE)한다.
      # 기존의 테이블을 재사용하고 싶다면 ddl-auto설정을 update로 변경함.
      ddl-auto: update
      # use-new-id-generator-mappings은 Hibernate의 ID 생성 전략을 따라갈지 말지 결정하는 설정임
      # 스프링부트3 에서는 사용할 수 없는 설정임.
      use-new-id-generator-mappings: false
    properties:
      hibernate:
        # []로 감싸 예외처리해주었음.
        "[format_sql]": true
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_ID}
            client-secret: ${GOOGLE_SECRET}
            scope: email, profile
    
# 카카오 ID, 비밀번호
kakao:
  default:
    id: ${KAKAO_ID}
    password: ${KAKAO_PASSWORD}

# 구글 비밀번호
google:
  default:
    password: ${GOOGLE_PASSWORD}